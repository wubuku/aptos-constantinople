// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module aptos_constantinople_demo::movable {
    use aptos_constantinople_demo::genesis_account;
    use aptos_constantinople_demo::pass_object;
    use aptos_framework::account;
    use aptos_framework::event;
    use aptos_std::table::{Self, Table};
    friend aptos_constantinople_demo::movable_create_logic;
    friend aptos_constantinople_demo::movable_update_logic;
    friend aptos_constantinople_demo::movable_aggregate;

    const EIdAlreadyExists: u64 = 101;
    const EDataTooLong: u64 = 102;
    const EInappropriateVersion: u64 = 103;
    const ENotInitialized: u64 = 110;

    struct Events has key {
        movable_created_handle: event::EventHandle<MovableCreated>,
        movable_updated_handle: event::EventHandle<MovableUpdated>,
    }

    struct Tables has key {
        movable_table: Table<address, Movable>,
    }

    public fun initialize(account: &signer) {
        genesis_account::assert_genesis_account(account);

        let res_account = genesis_account::resource_account_signer();
        move_to(&res_account, Events {
            movable_created_handle: account::new_event_handle<MovableCreated>(&res_account),
            movable_updated_handle: account::new_event_handle<MovableUpdated>(&res_account),
        });

        move_to(
            &res_account,
            Tables {
                movable_table: table::new(),
            },
        );

    }

    struct Movable has store {
        player_id: address,
        version: u64,
        value: bool,
    }

    public fun player_id(movable: &Movable): address {
        movable.player_id
    }

    public fun version(movable: &Movable): u64 {
        movable.version
    }

    public fun value(movable: &Movable): bool {
        movable.value
    }

    public(friend) fun set_value(movable: &mut Movable, value: bool) {
        movable.value = value;
    }

    fun new_movable(
        player_id: address,
        value: bool,
    ): Movable {
        Movable {
            player_id,
            version: 0,
            value,
        }
    }

    struct MovableCreated has store, drop {
        player_id: address,
        value: bool,
    }

    public fun movable_created_player_id(movable_created: &MovableCreated): address {
        movable_created.player_id
    }

    public fun movable_created_value(movable_created: &MovableCreated): bool {
        movable_created.value
    }

    public(friend) fun new_movable_created(
        player_id: address,
        value: bool,
    ): MovableCreated {
        MovableCreated {
            player_id,
            value,
        }
    }

    struct MovableUpdated has store, drop {
        player_id: address,
        version: u64,
        value: bool,
    }

    public fun movable_updated_player_id(movable_updated: &MovableUpdated): address {
        movable_updated.player_id
    }

    public fun movable_updated_value(movable_updated: &MovableUpdated): bool {
        movable_updated.value
    }

    public(friend) fun new_movable_updated(
        movable: &Movable,
        value: bool,
    ): MovableUpdated {
        MovableUpdated {
            player_id: player_id(movable),
            version: version(movable),
            value,
        }
    }


    public(friend) fun create_movable(
        player_id: address,
        value: bool,
    ): Movable acquires Tables {
        asset_movable_not_exists(player_id);
        let movable = new_movable(
            player_id,
            value,
        );
        movable
    }

    public(friend) fun asset_movable_not_exists(
        player_id: address,
    ) acquires Tables {
        assert!(exists<Tables>(genesis_account::resouce_account_address()), ENotInitialized);
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        assert!(!table::contains(&tables.movable_table, player_id), EIdAlreadyExists);
    }

    public(friend) fun update_version_and_add(movable: Movable) acquires Tables {
        movable.version = movable.version + 1;
        //assert!(movable.version != 0, EInappropriateVersion);
        private_add_movable(movable);
    }

    public(friend) fun add_movable(movable: Movable) acquires Tables {
        assert!(movable.version == 0, EInappropriateVersion);
        private_add_movable(movable);
    }

    public(friend) fun remove_movable(player_id: address): Movable acquires Tables {
        assert!(exists<Tables>(genesis_account::resouce_account_address()), ENotInitialized);
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        table::remove(&mut tables.movable_table, player_id)
    }

    fun private_add_movable(movable: Movable) acquires Tables {
        assert!(exists<Tables>(genesis_account::resouce_account_address()), ENotInitialized);
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        table::add(&mut tables.movable_table, player_id(&movable), movable);
    }

    public fun get_movable(player_id: address): pass_object::PassObject<Movable> acquires Tables {
        let movable = remove_movable(player_id);
        pass_object::new(movable)
    }

    public fun return_movable(movable_pass_obj: pass_object::PassObject<Movable>) acquires Tables {
        let movable = pass_object::extract(movable_pass_obj);
        private_add_movable(movable);
    }

    public(friend) fun drop_movable(movable: Movable) {
        let Movable {
            version: _version,
            player_id: _player_id,
            value: _value,
        } = movable;
    }

    public fun contains_movable(player_id: address): bool acquires Tables {
        let tables = borrow_global<Tables>(genesis_account::resouce_account_address());
        table::contains(&tables.movable_table,  player_id)
    }

    public(friend) fun emit_movable_created(movable_created: MovableCreated) acquires Events {
        assert!(exists<Events>(genesis_account::resouce_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.movable_created_handle, movable_created);
    }

    public(friend) fun emit_movable_updated(movable_updated: MovableUpdated) acquires Events {
        assert!(exists<Events>(genesis_account::resouce_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.movable_updated_handle, movable_updated);
    }

}
