// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module aptos_constantinople_demo::encounter_aggregate {
    use aptos_constantinople_demo::encounter;
    use aptos_constantinople_demo::encounter_create_logic;
    use aptos_constantinople_demo::encounter_delete_logic;
    use aptos_constantinople_demo::encounter_update_logic;

    friend aptos_constantinople_demo::rpg_service;

    public(friend) fun create(
        account: &signer,
        store: address,
        player_id: address,
        is_existent: bool,
        monster_id: address,
        catch_attempts: u64,
    ) {
        let encounter_created = encounter_create_logic::verify(
            account,
            store,
            player_id,
            is_existent,
            monster_id,
            catch_attempts,
        );
        let encounter = encounter_create_logic::mutate(
            account,
            store,
            &encounter_created,
        );
        encounter::add_encounter(store, encounter);
        encounter::emit_encounter_created(store, encounter_created);
    }

    public(friend) fun update(
        account: &signer,
        store: address,
        player_id: address,
        is_existent: bool,
        monster_id: address,
        catch_attempts: u64,
    ) {
        let encounter = encounter::remove_encounter(store, player_id);
        let encounter_updated = encounter_update_logic::verify(
            account,
            store,
            is_existent,
            monster_id,
            catch_attempts,
            &encounter,
        );
        let updated_encounter = encounter_update_logic::mutate(
            account,
            &encounter_updated,
            encounter,
        );
        encounter::update_version_and_add(store, updated_encounter);
        encounter::emit_encounter_updated(store, encounter_updated);
    }

    public(friend) fun delete(
        account: &signer,
        store: address,
        player_id: address,
    ) {
        let encounter = encounter::remove_encounter(store, player_id);
        let encounter_deleted = encounter_delete_logic::verify(
            account,
            store,
            &encounter,
        );
        let updated_encounter = encounter_delete_logic::mutate(
            account,
            &encounter_deleted,
            encounter,
        );
        encounter::drop_encounter(updated_encounter);
        encounter::emit_encounter_deleted(store, encounter_deleted);
    }

}
