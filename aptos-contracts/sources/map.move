// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module aptos_constantinople_demo::map {
    use aptos_constantinople_demo::genesis_account;
    use aptos_framework::account;
    use aptos_framework::event;
    friend aptos_constantinople_demo::map_aggregate;

    const EDataTooLong: u64 = 102;
    const EInappropriateVersion: u64 = 103;
    const ENotInitialized: u64 = 110;

    struct Events has key {
    }

    public fun initialize(account: &signer) {
        genesis_account::assert_genesis_account(account);

        let res_account = genesis_account::resource_account_signer();
        move_to(&res_account, Events {
        });

        let map = new_map();
        add_map(map);
    }

    struct Map has key, store {
        version: u64,
        width: u64,
        height: u64,
        terrain: vector<vector<u8>>,
    }

    public fun version(map: &Map): u64 {
        map.version
    }

    public(friend) fun set_width(map: &mut Map, width: u64) {
        map.width = width;
    }

    public(friend) fun set_height(map: &mut Map, height: u64) {
        map.height = height;
    }

    public(friend) fun set_terrain(map: &mut Map, terrain: vector<vector<u8>>) {
        map.terrain = terrain;
    }

    public(friend) fun new_map(
    ): Map {
        Map {
            version: 0,
            width: 32,
            height: 27,
            terrain: vector[
    vector[0,0,0,0,0,0,80,80,80,80,80,80,80,0,0,0,0,0,0,0,0,0,0,80,80,80,80,80,80,80,80,80],
    vector[0,0,0,0,0,0,81,81,81,81,81,81,81,0,0,0,135,136,137,138,139,0,0,81,81,81,81,81,81,81,81,81],
    vector[0,0,0,0,0,0,22,22,0,20,20,20,20,20,20,0,140,141,142,143,144,0,0,0,0,0,0,0,0,0,80,80],
    vector[0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,0,145,146,147,148,149,0,0,0,0,83,83,22,0,0,81,81],
    vector[0,0,0,0,0,0,0,0,0,20,20,22,22,20,20,0,150,151,152,153,154,0,0,0,0,83,83,22,0,0,80,80],
    vector[0,0,0,0,0,0,0,0,0,20,20,22,22,20,20,0,155,156,157,158,159,161,0,0,0,0,0,0,0,0,81,81],
    vector[83,83,83,0,0,0,0,0,0,20,20,20,20,20,20,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,80,80],
    vector[80,80,83,0,0,0,0,0,0,20,20,20,20,20,20,0,22,0,0,0,0,100,101,102,103,104,105,106,0,0,81,81],
    vector[81,81,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,107,108,109,110,111,112,113,0,0,80,80],
    vector[80,80,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,115,116,117,118,119,120,0,0,81,81],
    vector[81,81,22,0,0,0,83,30,31,32,83,0,0,0,70,0,0,0,0,0,0,121,122,123,124,125,126,127,0,0,80,80],
    vector[80,80,22,0,0,0,83,33,34,35,83,0,0,0,71,0,0,0,0,0,0,128,129,130,131,132,133,134,0,0,81,81],
    vector[81,81,22,0,0,0,83,33,34,35,83,0,0,22,72,22,0,0,0,80,0,22,22,22,161,23,0,0,0,0,80,80],
    vector[80,80,22,0,0,0,83,33,34,35,83,0,22,74,73,75,22,0,0,81,0,22,22,22,0,0,0,0,0,0,81,81],
    vector[81,81,22,0,0,0,83,33,34,35,83,83,20,30,31,32,20,0,0,0,0,0,0,0,0,0,0,0,0,0,83,83],
    vector[80,80,83,0,0,0,83,33,34,34,31,31,31,34,34,34,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,83],
    vector[81,81,83,0,0,0,83,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,43],
    vector[83,83,83,0,0,0,83,36,37,37,37,37,37,37,37,37,37,37,37,37,37,34,34,34,37,37,37,37,37,37,38,83],
    vector[22,83,0,0,0,0,83,83,83,83,83,83,83,83,0,0,0,0,0,0,20,33,34,35,20,0,0,0,0,0,83,83],
    vector[22,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80,20,36,37,38,20,80,0,0,0,0,80,80],
    vector[22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,81,0,60,61,62,0,81,0,0,0,0,81,81],
    vector[80,80,22,0,20,20,20,0,0,0,0,0,0,0,0,0,0,0,80,80,0,63,64,65,0,80,0,0,22,0,80,80],
    vector[81,81,22,0,20,20,20,0,0,0,0,0,0,0,0,0,0,0,81,81,0,66,67,68,0,81,0,0,22,0,81,81],
    vector[80,80,22,0,20,20,20,0,83,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80],
    vector[81,81,22,0,20,20,20,0,83,83,0,0,80,0,80,0,0,0,0,0,22,22,22,22,22,0,0,0,0,0,81,81],
    vector[80,80,22,0,0,0,0,0,83,83,0,0,81,0,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80],
    vector[81,81,83,83,83,83,83,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,0,0,0,0,0,81,81]
],
        }
    }

    struct MapInitialized has store, drop {
    }

    public(friend) fun new_map_initialized(
        map: &Map,
    ): MapInitialized {
        MapInitialized {
        }
    }


    public(friend) fun update_version_and_add(map: Map) {
        map.version = map.version + 1;
        //assert!(map.version != 0, EInappropriateVersion);
        private_add_map(map);
    }

    public(friend) fun add_map(map: Map) {
        assert!(map.version == 0, EInappropriateVersion);
        private_add_map(map);
    }

    public(friend) fun remove_map(): Map acquires Map {
        assert!(exists<Map>(genesis_account::resource_account_address()), ENotInitialized);
        move_from<Map>(genesis_account::resource_account_address())
    }

    fun private_add_map(map: Map) {
        move_to(&genesis_account::resource_account_signer(), map);
    }

    public fun singleton_width(): u64 acquires Map {
        let map = borrow_global<Map>(genesis_account::resource_account_address());
        map.width
    }

    public fun singleton_height(): u64 acquires Map {
        let map = borrow_global<Map>(genesis_account::resource_account_address());
        map.height
    }

    public fun singleton_terrain(): vector<vector<u8>> acquires Map {
        let map = borrow_global<Map>(genesis_account::resource_account_address());
        map.terrain
    }

    public fun get_all_porperties(): (u64, u64, vector<vector<u8>>) acquires Map {
        assert!(exists<Map>(genesis_account::resource_account_address()), ENotInitialized);
        let map = borrow_global<Map>(genesis_account::resource_account_address());
        (map.width, map.height, map.terrain)
    }

    public(friend) fun drop_map(map: Map) {
        let Map {
            version: _version,
            width: _width,
            height: _height,
            terrain: _terrain,
        } = map;
    }

    public fun map_exists(): bool {
        exists<Map>(genesis_account::resource_account_address())
    }

}
