// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module aptos_constantinople_demo::player {
    use aptos_constantinople_demo::genesis_account;
    use aptos_constantinople_demo::pass_object;
    use aptos_framework::account;
    use aptos_framework::event;
    use aptos_std::table::{Self, Table};
    friend aptos_constantinople_demo::player_create_logic;
    friend aptos_constantinople_demo::player_aggregate;

    const EIdAlreadyExists: u64 = 101;
    const EDataTooLong: u64 = 102;
    const EInappropriateVersion: u64 = 103;
    const ENotInitialized: u64 = 110;

    struct Events has key {
        player_created_handle: event::EventHandle<PlayerCreated>,
    }

    struct Tables has key {
        player_table: Table<address, Player>,
    }

    public fun initialize(account: &signer) {
        genesis_account::assert_genesis_account(account);

        let res_account = genesis_account::resource_account_signer();
        move_to(&res_account, Events {
            player_created_handle: account::new_event_handle<PlayerCreated>(&res_account),
        });

        move_to(
            &res_account,
            Tables {
                player_table: table::new(),
            },
        );

    }

    struct Player has store {
        player_id: address,
        version: u64,
        value: bool,
    }

    public fun player_id(player: &Player): address {
        player.player_id
    }

    public fun version(player: &Player): u64 {
        player.version
    }

    public(friend) fun set_value(player: &mut Player, value: bool) {
        player.value = value;
    }

    fun new_player(
        player_id: address,
        value: bool,
    ): Player {
        Player {
            player_id,
            version: 0,
            value,
        }
    }

    struct PlayerCreated has store, drop {
        player_id: address,
        value: bool,
    }

    public fun player_created_player_id(player_created: &PlayerCreated): address {
        player_created.player_id
    }

    public fun player_created_value(player_created: &PlayerCreated): bool {
        player_created.value
    }

    public(friend) fun new_player_created(
        player_id: address,
        value: bool,
    ): PlayerCreated {
        PlayerCreated {
            player_id,
            value,
        }
    }


    public(friend) fun create_player(
        player_id: address,
        value: bool,
    ): Player acquires Tables {
        asset_player_not_exists(player_id);
        let player = new_player(
            player_id,
            value,
        );
        player
    }

    public(friend) fun asset_player_not_exists(
        player_id: address,
    ) acquires Tables {
        assert!(exists<Tables>(genesis_account::resouce_account_address()), ENotInitialized);
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        assert!(!table::contains(&tables.player_table, player_id), EIdAlreadyExists);
    }

    public(friend) fun update_version_and_add(player: Player) acquires Tables {
        player.version = player.version + 1;
        //assert!(player.version != 0, EInappropriateVersion);
        private_add_player(player);
    }

    public(friend) fun add_player(player: Player) acquires Tables {
        assert!(player.version == 0, EInappropriateVersion);
        private_add_player(player);
    }

    public(friend) fun remove_player(player_id: address): Player acquires Tables {
        assert!(exists<Tables>(genesis_account::resouce_account_address()), ENotInitialized);
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        table::remove(&mut tables.player_table, player_id)
    }

    fun private_add_player(player: Player) acquires Tables {
        assert!(exists<Tables>(genesis_account::resouce_account_address()), ENotInitialized);
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        table::add(&mut tables.player_table, player_id(&player), player);
    }

    public fun get_all_porperties(player_id: address): bool acquires Tables {
        assert!(exists<Tables>(genesis_account::resouce_account_address()), ENotInitialized);
        let tables = borrow_global<Tables>(genesis_account::resouce_account_address());
        let player = table::borrow(&tables.player_table, player_id);
        player.value
    }

    public(friend) fun drop_player(player: Player) {
        let Player {
            version: _version,
            player_id: _player_id,
            value: _value,
        } = player;
    }

    public fun contains_player(player_id: address): bool acquires Tables {
        let tables = borrow_global<Tables>(genesis_account::resouce_account_address());
        table::contains(&tables.player_table,  player_id)
    }

    public(friend) fun emit_player_created(player_created: PlayerCreated) acquires Events {
        assert!(exists<Events>(genesis_account::resouce_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.player_created_handle, player_created);
    }

}
