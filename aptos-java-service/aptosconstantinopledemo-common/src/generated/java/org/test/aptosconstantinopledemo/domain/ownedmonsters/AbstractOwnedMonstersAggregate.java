// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosconstantinopledemo.domain.ownedmonsters;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.specialization.*;

public abstract class AbstractOwnedMonstersAggregate extends AbstractAggregate implements OwnedMonstersAggregate {
    private OwnedMonstersState.MutableOwnedMonstersState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractOwnedMonstersAggregate(OwnedMonstersState state) {
        this.state = (OwnedMonstersState.MutableOwnedMonstersState)state;
    }

    public OwnedMonstersState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        OwnedMonstersCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleOwnedMonstersAggregate extends AbstractOwnedMonstersAggregate {
        public SimpleOwnedMonstersAggregate(OwnedMonstersState state) {
            super(state);
        }

        @Override
        public void create(String[] monsters, Long offChainVersion, String commandId, String requesterId, OwnedMonstersCommands.Create c) {
            try {
                verifyCreate(monsters, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newOwnedMonstersCreated(monsters, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void addMonster(String monsterId, Long offChainVersion, String commandId, String requesterId, OwnedMonstersCommands.AddMonster c) {
            try {
                verifyAddMonster(monsterId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newMonsterAddedToPlayer(monsterId, offChainVersion, commandId, requesterId);
            apply(e);
        }

        protected void verifyCreate(String[] monsters, OwnedMonstersCommands.Create c) {
            String[] Monsters = monsters;

            ReflectUtils.invokeStaticMethod(
                    "org.test.aptosconstantinopledemo.domain.ownedmonsters.CreateLogic",
                    "verify",
                    new Class[]{OwnedMonstersState.class, String[].class, VerificationContext.class},
                    new Object[]{getState(), monsters, VerificationContext.forCommand(c)}
            );

//package org.test.aptosconstantinopledemo.domain.ownedmonsters;
//
//public class CreateLogic {
//    public static void verify(OwnedMonstersState ownedMonstersState, String[] monsters, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyAddMonster(String monsterId, OwnedMonstersCommands.AddMonster c) {
            String MonsterId = monsterId;

            ReflectUtils.invokeStaticMethod(
                    "org.test.aptosconstantinopledemo.domain.ownedmonsters.AddMonsterLogic",
                    "verify",
                    new Class[]{OwnedMonstersState.class, String.class, VerificationContext.class},
                    new Object[]{getState(), monsterId, VerificationContext.forCommand(c)}
            );

//package org.test.aptosconstantinopledemo.domain.ownedmonsters;
//
//public class AddMonsterLogic {
//    public static void verify(OwnedMonstersState ownedMonstersState, String monsterId, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected AbstractOwnedMonstersEvent.OwnedMonstersCreated newOwnedMonstersCreated(String[] monsters, Long offChainVersion, String commandId, String requesterId) {
            OwnedMonstersEventId eventId = new OwnedMonstersEventId(getState().getPlayerId(), null);
            AbstractOwnedMonstersEvent.OwnedMonstersCreated e = new AbstractOwnedMonstersEvent.OwnedMonstersCreated();

            e.setMonsters(monsters);
            e.setAptosEventVersion(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventSequenceNumber(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventType(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventGuid(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOwnedMonstersEventId(eventId);
            return e;
        }

        protected AbstractOwnedMonstersEvent.MonsterAddedToPlayer newMonsterAddedToPlayer(String monsterId, Long offChainVersion, String commandId, String requesterId) {
            OwnedMonstersEventId eventId = new OwnedMonstersEventId(getState().getPlayerId(), null);
            AbstractOwnedMonstersEvent.MonsterAddedToPlayer e = new AbstractOwnedMonstersEvent.MonsterAddedToPlayer();

            e.setMonsterId(monsterId);
            e.setAptosEventVersion(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventSequenceNumber(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventType(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventGuid(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOwnedMonstersEventId(eventId);
            return e;
        }

    }

}

