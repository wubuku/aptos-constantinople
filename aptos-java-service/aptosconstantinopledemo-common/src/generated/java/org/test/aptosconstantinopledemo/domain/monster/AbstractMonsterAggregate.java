// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosconstantinopledemo.domain.monster;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.specialization.*;

public abstract class AbstractMonsterAggregate extends AbstractAggregate implements MonsterAggregate {
    private MonsterState.MutableMonsterState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractMonsterAggregate(MonsterState state) {
        this.state = (MonsterState.MutableMonsterState)state;
    }

    public MonsterState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        MonsterCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleMonsterAggregate extends AbstractMonsterAggregate {
        public SimpleMonsterAggregate(MonsterState state) {
            super(state);
        }

        @Override
        public void create(BigInteger monsterType, Long offChainVersion, String commandId, String requesterId, MonsterCommands.Create c) {
            java.util.function.Supplier<MonsterEvent.MonsterCreated> eventFactory = () -> newMonsterCreated(monsterType, offChainVersion, commandId, requesterId);
            MonsterEvent.MonsterCreated e;
            try {
                e = verifyCreate(eventFactory, monsterType, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void delete(Long offChainVersion, String commandId, String requesterId, MonsterCommands.Delete c) {
            java.util.function.Supplier<MonsterEvent.MonsterDeleted> eventFactory = () -> newMonsterDeleted(offChainVersion, commandId, requesterId);
            MonsterEvent.MonsterDeleted e;
            try {
                e = verifyDelete(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected MonsterEvent.MonsterCreated verifyCreate(java.util.function.Supplier<MonsterEvent.MonsterCreated> eventFactory, BigInteger monsterType, MonsterCommands.Create c) {
            BigInteger MonsterType = monsterType;

            MonsterEvent.MonsterCreated e = (MonsterEvent.MonsterCreated) ReflectUtils.invokeStaticMethod(
                    "org.test.aptosconstantinopledemo.domain.monster.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, MonsterState.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), monsterType, VerificationContext.forCommand(c)}
            );

//package org.test.aptosconstantinopledemo.domain.monster;
//
//public class CreateLogic {
//    public static MonsterEvent.MonsterCreated verify(java.util.function.Supplier<MonsterEvent.MonsterCreated> eventFactory, MonsterState monsterState, BigInteger monsterType, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected MonsterEvent.MonsterDeleted verifyDelete(java.util.function.Supplier<MonsterEvent.MonsterDeleted> eventFactory, MonsterCommands.Delete c) {

            MonsterEvent.MonsterDeleted e = (MonsterEvent.MonsterDeleted) ReflectUtils.invokeStaticMethod(
                    "org.test.aptosconstantinopledemo.domain.monster.DeleteLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, MonsterState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.aptosconstantinopledemo.domain.monster;
//
//public class DeleteLogic {
//    public static MonsterEvent.MonsterDeleted verify(java.util.function.Supplier<MonsterEvent.MonsterDeleted> eventFactory, MonsterState monsterState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractMonsterEvent.MonsterCreated newMonsterCreated(BigInteger monsterType, Long offChainVersion, String commandId, String requesterId) {
            MonsterEventId eventId = new MonsterEventId(getState().getMonsterId(), null);
            AbstractMonsterEvent.MonsterCreated e = new AbstractMonsterEvent.MonsterCreated();

            e.setMonsterType(monsterType);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setMonsterEventId(eventId);
            return e;
        }

        protected AbstractMonsterEvent.MonsterDeleted newMonsterDeleted(Long offChainVersion, String commandId, String requesterId) {
            MonsterEventId eventId = new MonsterEventId(getState().getMonsterId(), null);
            AbstractMonsterEvent.MonsterDeleted e = new AbstractMonsterEvent.MonsterDeleted();

            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setMonsterEventId(eventId);
            return e;
        }

    }

}

