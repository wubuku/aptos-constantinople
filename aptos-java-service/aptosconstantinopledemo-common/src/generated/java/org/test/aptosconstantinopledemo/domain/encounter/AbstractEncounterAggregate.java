// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosconstantinopledemo.domain.encounter;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.specialization.*;

public abstract class AbstractEncounterAggregate extends AbstractAggregate implements EncounterAggregate {
    private EncounterState.MutableEncounterState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractEncounterAggregate(EncounterState state) {
        this.state = (EncounterState.MutableEncounterState)state;
    }

    public EncounterState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        EncounterCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleEncounterAggregate extends AbstractEncounterAggregate {
        public SimpleEncounterAggregate(EncounterState state) {
            super(state);
        }

        @Override
        public void create(Boolean isExistent, String monsterId, BigInteger catchAttempts, Long offChainVersion, String commandId, String requesterId, EncounterCommands.Create c) {
            java.util.function.Supplier<EncounterEvent.EncounterCreated> eventFactory = () -> newEncounterCreated(isExistent, monsterId, catchAttempts, offChainVersion, commandId, requesterId);
            EncounterEvent.EncounterCreated e;
            try {
                e = verifyCreate(eventFactory, isExistent, monsterId, catchAttempts, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void update(Boolean isExistent, String monsterId, BigInteger catchAttempts, Long offChainVersion, String commandId, String requesterId, EncounterCommands.Update c) {
            java.util.function.Supplier<EncounterEvent.EncounterUpdated> eventFactory = () -> newEncounterUpdated(isExistent, monsterId, catchAttempts, offChainVersion, commandId, requesterId);
            EncounterEvent.EncounterUpdated e;
            try {
                e = verifyUpdate(eventFactory, isExistent, monsterId, catchAttempts, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void delete(Long offChainVersion, String commandId, String requesterId, EncounterCommands.Delete c) {
            java.util.function.Supplier<EncounterEvent.EncounterDeleted> eventFactory = () -> newEncounterDeleted(offChainVersion, commandId, requesterId);
            EncounterEvent.EncounterDeleted e;
            try {
                e = verifyDelete(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected EncounterEvent.EncounterCreated verifyCreate(java.util.function.Supplier<EncounterEvent.EncounterCreated> eventFactory, Boolean isExistent, String monsterId, BigInteger catchAttempts, EncounterCommands.Create c) {
            Boolean IsExistent = isExistent;
            String MonsterId = monsterId;
            BigInteger CatchAttempts = catchAttempts;

            EncounterEvent.EncounterCreated e = (EncounterEvent.EncounterCreated) ReflectUtils.invokeStaticMethod(
                    "org.test.aptosconstantinopledemo.domain.encounter.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, EncounterState.class, Boolean.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), isExistent, monsterId, catchAttempts, VerificationContext.forCommand(c)}
            );

//package org.test.aptosconstantinopledemo.domain.encounter;
//
//public class CreateLogic {
//    public static EncounterEvent.EncounterCreated verify(java.util.function.Supplier<EncounterEvent.EncounterCreated> eventFactory, EncounterState encounterState, Boolean isExistent, String monsterId, BigInteger catchAttempts, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected EncounterEvent.EncounterUpdated verifyUpdate(java.util.function.Supplier<EncounterEvent.EncounterUpdated> eventFactory, Boolean isExistent, String monsterId, BigInteger catchAttempts, EncounterCommands.Update c) {
            Boolean IsExistent = isExistent;
            String MonsterId = monsterId;
            BigInteger CatchAttempts = catchAttempts;

            EncounterEvent.EncounterUpdated e = (EncounterEvent.EncounterUpdated) ReflectUtils.invokeStaticMethod(
                    "org.test.aptosconstantinopledemo.domain.encounter.UpdateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, EncounterState.class, Boolean.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), isExistent, monsterId, catchAttempts, VerificationContext.forCommand(c)}
            );

//package org.test.aptosconstantinopledemo.domain.encounter;
//
//public class UpdateLogic {
//    public static EncounterEvent.EncounterUpdated verify(java.util.function.Supplier<EncounterEvent.EncounterUpdated> eventFactory, EncounterState encounterState, Boolean isExistent, String monsterId, BigInteger catchAttempts, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected EncounterEvent.EncounterDeleted verifyDelete(java.util.function.Supplier<EncounterEvent.EncounterDeleted> eventFactory, EncounterCommands.Delete c) {

            EncounterEvent.EncounterDeleted e = (EncounterEvent.EncounterDeleted) ReflectUtils.invokeStaticMethod(
                    "org.test.aptosconstantinopledemo.domain.encounter.DeleteLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, EncounterState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.aptosconstantinopledemo.domain.encounter;
//
//public class DeleteLogic {
//    public static EncounterEvent.EncounterDeleted verify(java.util.function.Supplier<EncounterEvent.EncounterDeleted> eventFactory, EncounterState encounterState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractEncounterEvent.EncounterCreated newEncounterCreated(Boolean isExistent, String monsterId, BigInteger catchAttempts, Long offChainVersion, String commandId, String requesterId) {
            EncounterEventId eventId = new EncounterEventId(getState().getPlayerId(), null);
            AbstractEncounterEvent.EncounterCreated e = new AbstractEncounterEvent.EncounterCreated();

            e.setIsExistent(isExistent);
            e.setMonsterId(monsterId);
            e.setCatchAttempts(catchAttempts);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setEncounterEventId(eventId);
            return e;
        }

        protected AbstractEncounterEvent.EncounterUpdated newEncounterUpdated(Boolean isExistent, String monsterId, BigInteger catchAttempts, Long offChainVersion, String commandId, String requesterId) {
            EncounterEventId eventId = new EncounterEventId(getState().getPlayerId(), null);
            AbstractEncounterEvent.EncounterUpdated e = new AbstractEncounterEvent.EncounterUpdated();

            e.setIsExistent(isExistent);
            e.setMonsterId(monsterId);
            e.setCatchAttempts(catchAttempts);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setEncounterEventId(eventId);
            return e;
        }

        protected AbstractEncounterEvent.EncounterDeleted newEncounterDeleted(Long offChainVersion, String commandId, String requesterId) {
            EncounterEventId eventId = new EncounterEventId(getState().getPlayerId(), null);
            AbstractEncounterEvent.EncounterDeleted e = new AbstractEncounterEvent.EncounterDeleted();

            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setEncounterEventId(eventId);
            return e;
        }

    }

}

