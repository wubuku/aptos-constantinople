// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosconstantinopledemo.aptos.contract.service;


import com.github.wubuku.aptos.bean.AccountResource;
import com.github.wubuku.aptos.utils.*;
import org.test.aptosconstantinopledemo.aptos.contract.AptosAccount;
import org.test.aptosconstantinopledemo.aptos.contract.ContractConstants;
import org.test.aptosconstantinopledemo.aptos.contract.DomainBeanUtils;
import org.test.aptosconstantinopledemo.aptos.contract.repository.AptosAccountRepository;
import org.test.aptosconstantinopledemo.domain.encounterable.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.aptos.contract.Encounterable;

import java.io.IOException;
import java.math.*;
import java.util.*;
import java.util.function.*;


public class AptosEncounterableStateRetriever {

    private NodeApiClient aptosNodeApiClient;

    private String aptosContractAddress;

    private AptosAccountRepository aptosAccountRepository;

    private Function<String, EncounterableState.MutableEncounterableState> encounterableStateFactory;


    public AptosEncounterableStateRetriever(NodeApiClient aptosNodeApiClient,
                                    String aptosContractAddress,
                                    AptosAccountRepository aptosAccountRepository,
                                    Function<String, EncounterableState.MutableEncounterableState> encounterableStateFactory
    ) {
        this.aptosNodeApiClient = aptosNodeApiClient;
        this.aptosContractAddress = aptosContractAddress;
        this.aptosAccountRepository = aptosAccountRepository;
        this.encounterableStateFactory = encounterableStateFactory;
    }

    public EncounterableState retrieveEncounterableState(String playerId) {
        String resourceAccountAddress = getResourceAccountAddress();
        AccountResource<Encounterable.Tables> accountResource;
        try {
            accountResource = aptosNodeApiClient.getAccountResource(resourceAccountAddress,
                    this.aptosContractAddress + "::" + ContractConstants.ENCOUNTERABLE_MODULE_TABLES,
                    Encounterable.Tables.class,
                    null);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        String tableHandle = accountResource.getData().getEncounterableTable().getHandle();
        Encounterable encounterable;
        try {
            encounterable = aptosNodeApiClient.getTableItem(
                    tableHandle,
                    ContractConstants.toNumericalAddressType(ContractConstants.ENCOUNTERABLE_ID_TYPE, this.aptosContractAddress),
                    this.aptosContractAddress + "::" + ContractConstants.ENCOUNTERABLE_MODULE_ENCOUNTERABLE,
                    playerId,
                    Encounterable.class,
                    null
            );
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return toEncounterableState(encounterable);
    }

    private EncounterableState toEncounterableState(Encounterable encounterable) {
        EncounterableState.MutableEncounterableState encounterableState = encounterableStateFactory.apply(encounterable.getPlayerId());
        encounterableState.setVersion(encounterable.getVersion());
        encounterableState.setValue(encounterable.getValue());
        return encounterableState;
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }

}

