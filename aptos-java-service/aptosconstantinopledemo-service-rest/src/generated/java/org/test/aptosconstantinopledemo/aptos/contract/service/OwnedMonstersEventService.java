// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosconstantinopledemo.aptos.contract.service;

import com.github.wubuku.aptos.bean.Event;
import com.github.wubuku.aptos.utils.NodeApiClient;

import org.test.aptosconstantinopledemo.domain.ownedmonsters.AbstractOwnedMonstersEvent;
import org.test.aptosconstantinopledemo.aptos.contract.ContractConstants;
import org.test.aptosconstantinopledemo.aptos.contract.DomainBeanUtils;
import org.test.aptosconstantinopledemo.aptos.contract.AptosAccount;

import org.test.aptosconstantinopledemo.aptos.contract.ownedmonsters.OwnedMonstersCreated;
import org.test.aptosconstantinopledemo.aptos.contract.ownedmonsters.MonsterAddedToPlayer;
import org.test.aptosconstantinopledemo.aptos.contract.repository.OwnedMonstersEventRepository;
import org.test.aptosconstantinopledemo.aptos.contract.repository.AptosAccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.math.*;
import java.util.*;


@Service
public class OwnedMonstersEventService {

    @Value("${aptos.contract.address}")
    private String aptosContractAddress;

    @Autowired
    private AptosAccountRepository aptosAccountRepository;

    @Autowired
    private NodeApiClient aptosNodeApiClient;

    @Autowired
    private OwnedMonstersEventRepository ownedMonstersEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractOwnedMonstersEvent event) {
        event.setStatus("D");
        ownedMonstersEventRepository.save(event);
    }

    @Transactional
    public void pullOwnedMonstersCreatedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getOwnedMonstersCreatedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<OwnedMonstersCreated>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.OWNED_MONSTERS_MODULE_EVENTS,
                        ContractConstants.OWNED_MONSTERS_MODULE_OWNED_MONSTERS_CREATED_HANDLE_FIELD,
                        OwnedMonstersCreated.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<OwnedMonstersCreated> eventEnvelope : eventPage) {
                    saveOwnedMonstersCreated(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getOwnedMonstersCreatedEventNextCursor() {
        AbstractOwnedMonstersEvent.OwnedMonstersCreated lastEvent = ownedMonstersEventRepository.findFirstOwnedMonstersCreatedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveOwnedMonstersCreated(Event<OwnedMonstersCreated> eventEnvelope) {
        AbstractOwnedMonstersEvent.OwnedMonstersCreated ownedMonstersCreated = DomainBeanUtils.toOwnedMonstersCreated(eventEnvelope);
        if (ownedMonstersEventRepository.findById(ownedMonstersCreated.getOwnedMonstersEventId()).isPresent()) {
            return;
        }
        ownedMonstersEventRepository.save(ownedMonstersCreated);
    }

    @Transactional
    public void pullMonsterAddedToPlayerEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getMonsterAddedToPlayerEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<MonsterAddedToPlayer>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.OWNED_MONSTERS_MODULE_EVENTS,
                        ContractConstants.OWNED_MONSTERS_MODULE_MONSTER_ADDED_TO_PLAYER_HANDLE_FIELD,
                        MonsterAddedToPlayer.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<MonsterAddedToPlayer> eventEnvelope : eventPage) {
                    saveMonsterAddedToPlayer(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getMonsterAddedToPlayerEventNextCursor() {
        AbstractOwnedMonstersEvent.MonsterAddedToPlayer lastEvent = ownedMonstersEventRepository.findFirstMonsterAddedToPlayerByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveMonsterAddedToPlayer(Event<MonsterAddedToPlayer> eventEnvelope) {
        AbstractOwnedMonstersEvent.MonsterAddedToPlayer monsterAddedToPlayer = DomainBeanUtils.toMonsterAddedToPlayer(eventEnvelope);
        if (ownedMonstersEventRepository.findById(monsterAddedToPlayer.getOwnedMonstersEventId()).isPresent()) {
            return;
        }
        ownedMonstersEventRepository.save(monsterAddedToPlayer);
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }
}
