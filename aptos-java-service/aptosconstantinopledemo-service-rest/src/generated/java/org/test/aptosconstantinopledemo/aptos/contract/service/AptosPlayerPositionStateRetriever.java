// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosconstantinopledemo.aptos.contract.service;


import com.github.wubuku.aptos.bean.AccountResource;
import com.github.wubuku.aptos.utils.*;
import org.test.aptosconstantinopledemo.aptos.contract.AptosAccount;
import org.test.aptosconstantinopledemo.aptos.contract.ContractConstants;
import org.test.aptosconstantinopledemo.aptos.contract.DomainBeanUtils;
import org.test.aptosconstantinopledemo.aptos.contract.repository.AptosAccountRepository;
import org.test.aptosconstantinopledemo.domain.playerposition.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.aptos.contract.PlayerPosition;

import java.io.IOException;
import java.math.*;
import java.util.*;
import java.util.function.*;


public class AptosPlayerPositionStateRetriever {

    private NodeApiClient aptosNodeApiClient;

    private String aptosContractAddress;

    private AptosAccountRepository aptosAccountRepository;

    private Function<String, PlayerPositionState.MutablePlayerPositionState> playerPositionStateFactory;


    public AptosPlayerPositionStateRetriever(NodeApiClient aptosNodeApiClient,
                                    String aptosContractAddress,
                                    AptosAccountRepository aptosAccountRepository,
                                    Function<String, PlayerPositionState.MutablePlayerPositionState> playerPositionStateFactory
    ) {
        this.aptosNodeApiClient = aptosNodeApiClient;
        this.aptosContractAddress = aptosContractAddress;
        this.aptosAccountRepository = aptosAccountRepository;
        this.playerPositionStateFactory = playerPositionStateFactory;
    }

    public PlayerPositionState retrievePlayerPositionState(String playerId) {
        String resourceAccountAddress = getResourceAccountAddress();
        AccountResource<PlayerPosition.Tables> accountResource;
        try {
            accountResource = aptosNodeApiClient.getAccountResource(resourceAccountAddress,
                    this.aptosContractAddress + "::" + ContractConstants.PLAYER_POSITION_MODULE_TABLES,
                    PlayerPosition.Tables.class,
                    null);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        String tableHandle = accountResource.getData().getPlayerPositionTable().getHandle();
        PlayerPosition playerPosition;
        try {
            playerPosition = aptosNodeApiClient.getTableItem(
                    tableHandle,
                    ContractConstants.toNumericalAddressType(ContractConstants.PLAYER_POSITION_ID_TYPE, this.aptosContractAddress),
                    this.aptosContractAddress + "::" + ContractConstants.PLAYER_POSITION_MODULE_PLAYER_POSITION,
                    playerId,
                    PlayerPosition.class,
                    null
            );
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return toPlayerPositionState(playerPosition);
    }

    private PlayerPositionState toPlayerPositionState(PlayerPosition playerPosition) {
        PlayerPositionState.MutablePlayerPositionState playerPositionState = playerPositionStateFactory.apply(playerPosition.getPlayerId());
        playerPositionState.setVersion(playerPosition.getVersion());
        playerPositionState.setPosition(DomainBeanUtils.toPosition(playerPosition.getPosition()));
        return playerPositionState;
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }

}

