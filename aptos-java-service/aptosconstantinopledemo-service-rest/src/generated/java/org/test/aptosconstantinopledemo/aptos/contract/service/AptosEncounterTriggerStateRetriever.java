// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosconstantinopledemo.aptos.contract.service;


import com.github.wubuku.aptos.bean.AccountResource;
import com.github.wubuku.aptos.utils.*;
import org.test.aptosconstantinopledemo.aptos.contract.AptosAccount;
import org.test.aptosconstantinopledemo.aptos.contract.ContractConstants;
import org.test.aptosconstantinopledemo.aptos.contract.DomainBeanUtils;
import org.test.aptosconstantinopledemo.aptos.contract.repository.AptosAccountRepository;
import org.test.aptosconstantinopledemo.domain.encountertrigger.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.aptos.contract.EncounterTrigger;

import java.io.IOException;
import java.math.*;
import java.util.*;
import java.util.function.*;


public class AptosEncounterTriggerStateRetriever {

    private NodeApiClient aptosNodeApiClient;

    private String aptosContractAddress;

    private AptosAccountRepository aptosAccountRepository;

    private Function<Position, EncounterTriggerState.MutableEncounterTriggerState> encounterTriggerStateFactory;


    public AptosEncounterTriggerStateRetriever(NodeApiClient aptosNodeApiClient,
                                    String aptosContractAddress,
                                    AptosAccountRepository aptosAccountRepository,
                                    Function<Position, EncounterTriggerState.MutableEncounterTriggerState> encounterTriggerStateFactory
    ) {
        this.aptosNodeApiClient = aptosNodeApiClient;
        this.aptosContractAddress = aptosContractAddress;
        this.aptosAccountRepository = aptosAccountRepository;
        this.encounterTriggerStateFactory = encounterTriggerStateFactory;
    }

    public EncounterTriggerState retrieveEncounterTriggerState(Position position) {
        String resourceAccountAddress = getResourceAccountAddress();
        AccountResource<EncounterTrigger.Tables> accountResource;
        try {
            accountResource = aptosNodeApiClient.getAccountResource(resourceAccountAddress,
                    this.aptosContractAddress + "::" + ContractConstants.ENCOUNTER_TRIGGER_MODULE_TABLES,
                    EncounterTrigger.Tables.class,
                    null);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        String tableHandle = accountResource.getData().getEncounterTriggerTable().getHandle();
        EncounterTrigger encounterTrigger;
        try {
            encounterTrigger = aptosNodeApiClient.getTableItem(
                    tableHandle,
                    ContractConstants.toNumericalAddressType(ContractConstants.ENCOUNTER_TRIGGER_ID_TYPE, this.aptosContractAddress),
                    this.aptosContractAddress + "::" + ContractConstants.ENCOUNTER_TRIGGER_MODULE_ENCOUNTER_TRIGGER,
                    position,
                    EncounterTrigger.class,
                    null
            );
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return toEncounterTriggerState(encounterTrigger);
    }

    private EncounterTriggerState toEncounterTriggerState(EncounterTrigger encounterTrigger) {
        EncounterTriggerState.MutableEncounterTriggerState encounterTriggerState = encounterTriggerStateFactory.apply(DomainBeanUtils.toPosition(encounterTrigger.getPosition()));
        encounterTriggerState.setVersion(encounterTrigger.getVersion());
        encounterTriggerState.setValue(encounterTrigger.getValue());
        return encounterTriggerState;
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }

}

