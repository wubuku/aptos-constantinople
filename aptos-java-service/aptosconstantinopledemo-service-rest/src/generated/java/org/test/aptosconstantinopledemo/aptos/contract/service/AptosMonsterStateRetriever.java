// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosconstantinopledemo.aptos.contract.service;


import com.github.wubuku.aptos.bean.AccountResource;
import com.github.wubuku.aptos.utils.*;
import org.test.aptosconstantinopledemo.aptos.contract.AptosAccount;
import org.test.aptosconstantinopledemo.aptos.contract.ContractConstants;
import org.test.aptosconstantinopledemo.aptos.contract.DomainBeanUtils;
import org.test.aptosconstantinopledemo.aptos.contract.repository.AptosAccountRepository;
import org.test.aptosconstantinopledemo.domain.monster.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.aptos.contract.Monster;

import java.io.IOException;
import java.math.*;
import java.util.*;
import java.util.function.*;


public class AptosMonsterStateRetriever {

    private NodeApiClient aptosNodeApiClient;

    private String aptosContractAddress;

    private AptosAccountRepository aptosAccountRepository;

    private Function<String, MonsterState.MutableMonsterState> monsterStateFactory;


    public AptosMonsterStateRetriever(NodeApiClient aptosNodeApiClient,
                                    String aptosContractAddress,
                                    AptosAccountRepository aptosAccountRepository,
                                    Function<String, MonsterState.MutableMonsterState> monsterStateFactory
    ) {
        this.aptosNodeApiClient = aptosNodeApiClient;
        this.aptosContractAddress = aptosContractAddress;
        this.aptosAccountRepository = aptosAccountRepository;
        this.monsterStateFactory = monsterStateFactory;
    }

    public MonsterState retrieveMonsterState(String monsterId) {
        String resourceAccountAddress = getResourceAccountAddress();
        AccountResource<Monster.Tables> accountResource;
        try {
            accountResource = aptosNodeApiClient.getAccountResource(resourceAccountAddress,
                    this.aptosContractAddress + "::" + ContractConstants.MONSTER_MODULE_TABLES,
                    Monster.Tables.class,
                    null);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        String tableHandle = accountResource.getData().getMonsterTable().getHandle();
        Monster monster;
        try {
            monster = aptosNodeApiClient.getTableItem(
                    tableHandle,
                    ContractConstants.toNumericalAddressType(ContractConstants.MONSTER_ID_TYPE, this.aptosContractAddress),
                    this.aptosContractAddress + "::" + ContractConstants.MONSTER_MODULE_MONSTER,
                    monsterId,
                    Monster.class,
                    null
            );
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return toMonsterState(monster);
    }

    private MonsterState toMonsterState(Monster monster) {
        MonsterState.MutableMonsterState monsterState = monsterStateFactory.apply(monster.getMonsterId());
        monsterState.setVersion(monster.getVersion());
        monsterState.setMonsterType(monster.getMonsterType());
        return monsterState;
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }

}

