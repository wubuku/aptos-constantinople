// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosconstantinopledemo.aptos.contract.service;

import com.github.wubuku.aptos.bean.Event;
import com.github.wubuku.aptos.utils.NodeApiClient;

import org.test.aptosconstantinopledemo.domain.encounter.AbstractEncounterEvent;
import org.test.aptosconstantinopledemo.aptos.contract.ContractConstants;
import org.test.aptosconstantinopledemo.aptos.contract.DomainBeanUtils;
import org.test.aptosconstantinopledemo.aptos.contract.AptosAccount;

import org.test.aptosconstantinopledemo.aptos.contract.encounter.EncounterCreated;
import org.test.aptosconstantinopledemo.aptos.contract.encounter.EncounterUpdated;
import org.test.aptosconstantinopledemo.aptos.contract.encounter.EncounterDeleted;
import org.test.aptosconstantinopledemo.aptos.contract.repository.EncounterEventRepository;
import org.test.aptosconstantinopledemo.aptos.contract.repository.AptosAccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.math.*;
import java.util.*;


@Service
public class EncounterEventService {

    public static final java.util.Set<String> DELETION_COMMAND_EVENTS = new java.util.HashSet<>(java.util.Arrays.asList("EncounterDeleted"));

    public static boolean isDeletionCommand(String eventType) {
        return DELETION_COMMAND_EVENTS.contains(eventType);
    }

    public static boolean isDeletionCommand(AbstractEncounterEvent e) {
        if (isDeletionCommand(e.getEventClass())) {
            return true;
        }
        return false;
    }

    @Value("${aptos.contract.address}")
    private String aptosContractAddress;

    @Autowired
    private AptosAccountRepository aptosAccountRepository;

    @Autowired
    private NodeApiClient aptosNodeApiClient;

    @Autowired
    private EncounterEventRepository encounterEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractEncounterEvent event) {
        event.setStatus("D");
        encounterEventRepository.save(event);
    }

    @Transactional
    public void pullEncounterCreatedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getEncounterCreatedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<EncounterCreated>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.ENCOUNTER_MODULE_EVENTS,
                        ContractConstants.ENCOUNTER_MODULE_ENCOUNTER_CREATED_HANDLE_FIELD,
                        EncounterCreated.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<EncounterCreated> eventEnvelope : eventPage) {
                    saveEncounterCreated(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getEncounterCreatedEventNextCursor() {
        AbstractEncounterEvent.EncounterCreated lastEvent = encounterEventRepository.findFirstEncounterCreatedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveEncounterCreated(Event<EncounterCreated> eventEnvelope) {
        AbstractEncounterEvent.EncounterCreated encounterCreated = DomainBeanUtils.toEncounterCreated(eventEnvelope);
        if (encounterEventRepository.findById(encounterCreated.getEncounterEventId()).isPresent()) {
            return;
        }
        encounterEventRepository.save(encounterCreated);
    }

    @Transactional
    public void pullEncounterUpdatedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getEncounterUpdatedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<EncounterUpdated>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.ENCOUNTER_MODULE_EVENTS,
                        ContractConstants.ENCOUNTER_MODULE_ENCOUNTER_UPDATED_HANDLE_FIELD,
                        EncounterUpdated.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<EncounterUpdated> eventEnvelope : eventPage) {
                    saveEncounterUpdated(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getEncounterUpdatedEventNextCursor() {
        AbstractEncounterEvent.EncounterUpdated lastEvent = encounterEventRepository.findFirstEncounterUpdatedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveEncounterUpdated(Event<EncounterUpdated> eventEnvelope) {
        AbstractEncounterEvent.EncounterUpdated encounterUpdated = DomainBeanUtils.toEncounterUpdated(eventEnvelope);
        if (encounterEventRepository.findById(encounterUpdated.getEncounterEventId()).isPresent()) {
            return;
        }
        encounterEventRepository.save(encounterUpdated);
    }

    @Transactional
    public void pullEncounterDeletedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getEncounterDeletedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<EncounterDeleted>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.ENCOUNTER_MODULE_EVENTS,
                        ContractConstants.ENCOUNTER_MODULE_ENCOUNTER_DELETED_HANDLE_FIELD,
                        EncounterDeleted.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<EncounterDeleted> eventEnvelope : eventPage) {
                    saveEncounterDeleted(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getEncounterDeletedEventNextCursor() {
        AbstractEncounterEvent.EncounterDeleted lastEvent = encounterEventRepository.findFirstEncounterDeletedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveEncounterDeleted(Event<EncounterDeleted> eventEnvelope) {
        AbstractEncounterEvent.EncounterDeleted encounterDeleted = DomainBeanUtils.toEncounterDeleted(eventEnvelope);
        if (encounterEventRepository.findById(encounterDeleted.getEncounterEventId()).isPresent()) {
            return;
        }
        encounterEventRepository.save(encounterDeleted);
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }
}
