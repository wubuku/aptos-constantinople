// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosconstantinopledemo.config;

import org.test.aptosconstantinopledemo.domain.player.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.domain.player.hibernate.*;
import org.test.aptosconstantinopledemo.domain.movable.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.domain.movable.hibernate.*;
import org.test.aptosconstantinopledemo.domain.encounterable.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.domain.encounterable.hibernate.*;
import org.test.aptosconstantinopledemo.domain.monster.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.domain.monster.hibernate.*;
import org.test.aptosconstantinopledemo.domain.obstruction.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.domain.obstruction.hibernate.*;
import org.test.aptosconstantinopledemo.domain.encountertrigger.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.domain.encountertrigger.hibernate.*;
import org.test.aptosconstantinopledemo.domain.playerposition.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.domain.playerposition.hibernate.*;
import org.test.aptosconstantinopledemo.domain.encounter.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.domain.encounter.hibernate.*;
import org.test.aptosconstantinopledemo.domain.ownedmonsters.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.domain.ownedmonsters.hibernate.*;
import org.test.aptosconstantinopledemo.domain.randomseed.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.domain.randomseed.hibernate.*;
import org.test.aptosconstantinopledemo.domain.map.*;
import org.test.aptosconstantinopledemo.domain.*;
import org.test.aptosconstantinopledemo.domain.map.hibernate.*;
import org.test.aptosconstantinopledemo.specialization.AggregateEventListener;
import org.test.aptosconstantinopledemo.specialization.EventStore;
import org.test.aptosconstantinopledemo.specialization.IdGenerator;
import org.test.aptosconstantinopledemo.specialization.ReadOnlyProxyGenerator;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AggregatesHibernateConfig {


    @Bean
    public PlayerStateRepository playerStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernatePlayerStateRepository repository = new HibernatePlayerStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public PlayerStateQueryRepository playerStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernatePlayerStateQueryRepository repository = new HibernatePlayerStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernatePlayerEventStore playerEventStore(SessionFactory hibernateSessionFactory) {
        HibernatePlayerEventStore eventStore = new HibernatePlayerEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractPlayerApplicationService.SimplePlayerApplicationService playerApplicationService(
            @Qualifier("playerEventStore") EventStore playerEventStore,
            PlayerStateRepository playerStateRepository,
            PlayerStateQueryRepository playerStateQueryRepository
    ) {
        AbstractPlayerApplicationService.SimplePlayerApplicationService applicationService = new AbstractPlayerApplicationService.SimplePlayerApplicationService(
                playerEventStore,
                playerStateRepository,
                playerStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public MovableStateRepository movableStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateMovableStateRepository repository = new HibernateMovableStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public MovableStateQueryRepository movableStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateMovableStateQueryRepository repository = new HibernateMovableStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateMovableEventStore movableEventStore(SessionFactory hibernateSessionFactory) {
        HibernateMovableEventStore eventStore = new HibernateMovableEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractMovableApplicationService.SimpleMovableApplicationService movableApplicationService(
            @Qualifier("movableEventStore") EventStore movableEventStore,
            MovableStateRepository movableStateRepository,
            MovableStateQueryRepository movableStateQueryRepository
    ) {
        AbstractMovableApplicationService.SimpleMovableApplicationService applicationService = new AbstractMovableApplicationService.SimpleMovableApplicationService(
                movableEventStore,
                movableStateRepository,
                movableStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public EncounterableStateRepository encounterableStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateEncounterableStateRepository repository = new HibernateEncounterableStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public EncounterableStateQueryRepository encounterableStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateEncounterableStateQueryRepository repository = new HibernateEncounterableStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateEncounterableEventStore encounterableEventStore(SessionFactory hibernateSessionFactory) {
        HibernateEncounterableEventStore eventStore = new HibernateEncounterableEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractEncounterableApplicationService.SimpleEncounterableApplicationService encounterableApplicationService(
            @Qualifier("encounterableEventStore") EventStore encounterableEventStore,
            EncounterableStateRepository encounterableStateRepository,
            EncounterableStateQueryRepository encounterableStateQueryRepository
    ) {
        AbstractEncounterableApplicationService.SimpleEncounterableApplicationService applicationService = new AbstractEncounterableApplicationService.SimpleEncounterableApplicationService(
                encounterableEventStore,
                encounterableStateRepository,
                encounterableStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public MonsterStateRepository monsterStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateMonsterStateRepository repository = new HibernateMonsterStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public MonsterStateQueryRepository monsterStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateMonsterStateQueryRepository repository = new HibernateMonsterStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateMonsterEventStore monsterEventStore(SessionFactory hibernateSessionFactory) {
        HibernateMonsterEventStore eventStore = new HibernateMonsterEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractMonsterApplicationService.SimpleMonsterApplicationService monsterApplicationService(
            @Qualifier("monsterEventStore") EventStore monsterEventStore,
            MonsterStateRepository monsterStateRepository,
            MonsterStateQueryRepository monsterStateQueryRepository
    ) {
        AbstractMonsterApplicationService.SimpleMonsterApplicationService applicationService = new AbstractMonsterApplicationService.SimpleMonsterApplicationService(
                monsterEventStore,
                monsterStateRepository,
                monsterStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public ObstructionStateRepository obstructionStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateObstructionStateRepository repository = new HibernateObstructionStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public ObstructionStateQueryRepository obstructionStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateObstructionStateQueryRepository repository = new HibernateObstructionStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateObstructionEventStore obstructionEventStore(SessionFactory hibernateSessionFactory) {
        HibernateObstructionEventStore eventStore = new HibernateObstructionEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractObstructionApplicationService.SimpleObstructionApplicationService obstructionApplicationService(
            @Qualifier("obstructionEventStore") EventStore obstructionEventStore,
            ObstructionStateRepository obstructionStateRepository,
            ObstructionStateQueryRepository obstructionStateQueryRepository
    ) {
        AbstractObstructionApplicationService.SimpleObstructionApplicationService applicationService = new AbstractObstructionApplicationService.SimpleObstructionApplicationService(
                obstructionEventStore,
                obstructionStateRepository,
                obstructionStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public EncounterTriggerStateRepository encounterTriggerStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateEncounterTriggerStateRepository repository = new HibernateEncounterTriggerStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public EncounterTriggerStateQueryRepository encounterTriggerStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateEncounterTriggerStateQueryRepository repository = new HibernateEncounterTriggerStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateEncounterTriggerEventStore encounterTriggerEventStore(SessionFactory hibernateSessionFactory) {
        HibernateEncounterTriggerEventStore eventStore = new HibernateEncounterTriggerEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractEncounterTriggerApplicationService.SimpleEncounterTriggerApplicationService encounterTriggerApplicationService(
            @Qualifier("encounterTriggerEventStore") EventStore encounterTriggerEventStore,
            EncounterTriggerStateRepository encounterTriggerStateRepository,
            EncounterTriggerStateQueryRepository encounterTriggerStateQueryRepository
    ) {
        AbstractEncounterTriggerApplicationService.SimpleEncounterTriggerApplicationService applicationService = new AbstractEncounterTriggerApplicationService.SimpleEncounterTriggerApplicationService(
                encounterTriggerEventStore,
                encounterTriggerStateRepository,
                encounterTriggerStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public PlayerPositionStateRepository playerPositionStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernatePlayerPositionStateRepository repository = new HibernatePlayerPositionStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public PlayerPositionStateQueryRepository playerPositionStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernatePlayerPositionStateQueryRepository repository = new HibernatePlayerPositionStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernatePlayerPositionEventStore playerPositionEventStore(SessionFactory hibernateSessionFactory) {
        HibernatePlayerPositionEventStore eventStore = new HibernatePlayerPositionEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractPlayerPositionApplicationService.SimplePlayerPositionApplicationService playerPositionApplicationService(
            @Qualifier("playerPositionEventStore") EventStore playerPositionEventStore,
            PlayerPositionStateRepository playerPositionStateRepository,
            PlayerPositionStateQueryRepository playerPositionStateQueryRepository
    ) {
        AbstractPlayerPositionApplicationService.SimplePlayerPositionApplicationService applicationService = new AbstractPlayerPositionApplicationService.SimplePlayerPositionApplicationService(
                playerPositionEventStore,
                playerPositionStateRepository,
                playerPositionStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public EncounterStateRepository encounterStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateEncounterStateRepository repository = new HibernateEncounterStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public EncounterStateQueryRepository encounterStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateEncounterStateQueryRepository repository = new HibernateEncounterStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateEncounterEventStore encounterEventStore(SessionFactory hibernateSessionFactory) {
        HibernateEncounterEventStore eventStore = new HibernateEncounterEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractEncounterApplicationService.SimpleEncounterApplicationService encounterApplicationService(
            @Qualifier("encounterEventStore") EventStore encounterEventStore,
            EncounterStateRepository encounterStateRepository,
            EncounterStateQueryRepository encounterStateQueryRepository
    ) {
        AbstractEncounterApplicationService.SimpleEncounterApplicationService applicationService = new AbstractEncounterApplicationService.SimpleEncounterApplicationService(
                encounterEventStore,
                encounterStateRepository,
                encounterStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public OwnedMonstersStateRepository ownedMonstersStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateOwnedMonstersStateRepository repository = new HibernateOwnedMonstersStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public OwnedMonstersStateQueryRepository ownedMonstersStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateOwnedMonstersStateQueryRepository repository = new HibernateOwnedMonstersStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateOwnedMonstersEventStore ownedMonstersEventStore(SessionFactory hibernateSessionFactory) {
        HibernateOwnedMonstersEventStore eventStore = new HibernateOwnedMonstersEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractOwnedMonstersApplicationService.SimpleOwnedMonstersApplicationService ownedMonstersApplicationService(
            @Qualifier("ownedMonstersEventStore") EventStore ownedMonstersEventStore,
            OwnedMonstersStateRepository ownedMonstersStateRepository,
            OwnedMonstersStateQueryRepository ownedMonstersStateQueryRepository
    ) {
        AbstractOwnedMonstersApplicationService.SimpleOwnedMonstersApplicationService applicationService = new AbstractOwnedMonstersApplicationService.SimpleOwnedMonstersApplicationService(
                ownedMonstersEventStore,
                ownedMonstersStateRepository,
                ownedMonstersStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public RandomSeedStateRepository randomSeedStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateRandomSeedStateRepository repository = new HibernateRandomSeedStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public RandomSeedStateQueryRepository randomSeedStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateRandomSeedStateQueryRepository repository = new HibernateRandomSeedStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateRandomSeedEventStore randomSeedEventStore(SessionFactory hibernateSessionFactory) {
        HibernateRandomSeedEventStore eventStore = new HibernateRandomSeedEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractRandomSeedApplicationService.SimpleRandomSeedApplicationService randomSeedApplicationService(
            @Qualifier("randomSeedEventStore") EventStore randomSeedEventStore,
            RandomSeedStateRepository randomSeedStateRepository,
            RandomSeedStateQueryRepository randomSeedStateQueryRepository
    ) {
        AbstractRandomSeedApplicationService.SimpleRandomSeedApplicationService applicationService = new AbstractRandomSeedApplicationService.SimpleRandomSeedApplicationService(
                randomSeedEventStore,
                randomSeedStateRepository,
                randomSeedStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public MapStateRepository mapStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateMapStateRepository repository = new HibernateMapStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public MapStateQueryRepository mapStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateMapStateQueryRepository repository = new HibernateMapStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateMapEventStore mapEventStore(SessionFactory hibernateSessionFactory) {
        HibernateMapEventStore eventStore = new HibernateMapEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractMapApplicationService.SimpleMapApplicationService mapApplicationService(
            @Qualifier("mapEventStore") EventStore mapEventStore,
            MapStateRepository mapStateRepository,
            MapStateQueryRepository mapStateQueryRepository
    ) {
        AbstractMapApplicationService.SimpleMapApplicationService applicationService = new AbstractMapApplicationService.SimpleMapApplicationService(
                mapEventStore,
                mapStateRepository,
                mapStateQueryRepository
        );
        return applicationService;
    }


}
